
func mayor : i32(x : i32, y : f32)

	if(x > y)
		ret T
	else
		ret F
	endif

endfunc

proc par(x : f64)

	par : f64 = x % 2

	switch(par)

		0:
			call showln "El número es par"
			break
		1:
			call showln "El número es positivo y no es par"
			break
		-1: 
			call showln "El número es negativo y no es par"
			break
		def:
			call showln "El número es mayor a 3 y no es par"
			break

	endswitch

endproc

proc aumentar(x : i64)

	y : f32
	z : i32
	a : f64
	n : f64

	for(i : i32 = 1, i < 10, i = i + 1)
		for(j : i32 = 1, i < 5, i = i + 1)
			if(x % 3 == 0)
				call showln "El número es multiplo de 3"
			else if(x % 5 == 0)
				call showln "El número es multiplo de 5"
			else if(x % 7 == 0)
				call showln "El número es multiplo de 7"
			endif
			
			y = y - i
			z = z + j
			a = y / z
			n = z ^ i
			
			if(j == 2)
				continue
			endif
		endproc
		
		if(i == 6)
			break
		endif
		
	endfor

endproc

func cuenta : i16(y : f32)

	r : i8 = 5
	while(r > 0)
		
		call showln "valor de y=" + y
		
		r = r - 1
		
		if(r < 2)
			continue
		endif
		
		call showln "valor de r=" + r
		
		y = y + 2
		
	endwhile

	ret y

endfunc

proc muestra (array : i64[], L : i32)
	

	for(i : i32 = 0, i < L, i = i + 1)
		call shownln array[i]
	endfor
	
	for(i : i32 = 0, i < L, i = i + 1)
		if(i % 2 == 0)
			array[i] = i + 10
		else 
			array[i] = i - 20
		endif
	endfor
	
	for(i : i32 = 0, i < L, i = i + 1)
		call shownln array[i]
	endfor

endproc

proc main()

	x : i32 = 10
	y : f32
	y = 3.0
	

	boolean : b = call mayor x y

	if(not boolean)
		call par x
	else
		call aumentar x
	endif

	array : i32[4] = {1,1,1,1}

	longitud : i8 = call length array

	s1 : str = "El tamaño del contenedor es " + longitud

	call shownln s1

	longitud = call length longitud

	s1 = "El tamaño de la cadena es " + longitud

	call shownln s1

	q : i32 = call cuenta y
	
	if (T and  not boolean)
		call muestra array longitud
	else 
		? Este codigo no se ejecuta
		call showln "Esto no deberia mostrarse"
	endif
	
	readonly e : i32
	readonly u : i64 = 4
	
	if ((e == 1) or (u != 7 ))
		e = 1
	endif
	
	call aumentar x
	
	call shownln "c3P"

endproc